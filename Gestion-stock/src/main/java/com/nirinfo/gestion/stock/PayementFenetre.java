/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.nirinfo.gestion.stock;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ANDI
 */
public class PayementFenetre extends javax.swing.JFrame {

    private Connexion connexion;
    private Connection con;
    private int prix;
    private FactureFenetre factureFenetre;

    /**
     * Creates new form PayementFenetre
     */
    public PayementFenetre() {
        initComponents();
        this.setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
        connexion = new Connexion();
        con = connexion.getCon();
        affiche();
    }

    public PayementFenetre(int prix, FactureFenetre factureFenetre) {
        initComponents();
        this.setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
        connexion = new Connexion();
        con = connexion.getCon();
        this.prix = prix;
        this.factureFenetre = factureFenetre;
        affiche();
    }

    public void affiche() {
        try {
            PreparedStatement pstClient = con.prepareStatement("SELECT * FROM client");
            ResultSet rs = pstClient.executeQuery();
            while (rs.next()) {
                client.addItem(rs.getString("nom") + " " + rs.getString("prenom"));
                montant.setText(String.valueOf(prix));
            }
        } catch (Exception ex) {
            Logger.getLogger(FactureFenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        client = new javax.swing.JComboBox<>();
        montant = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        reste = new javax.swing.JTextField();
        annuler = new javax.swing.JButton();
        valideBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        montant.setEditable(false);

        price.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceFocusLost(evt);
            }
        });

        jLabel1.setText("Montant total");

        jLabel2.setText("Payer");

        jButton1.setText("Mvola");

        jButton2.setText("PayPal");

        jButton3.setText("Strype");

        reste.setEditable(false);

        annuler.setText("Annuler");
        annuler.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                annulerMouseClicked(evt);
            }
        });

        valideBtn.setText("Valider");
        valideBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valideBtnMouseClicked(evt);
            }
        });
        valideBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valideBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Ou ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Payement par");

        jLabel5.setText("Reste");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reste)
                    .addComponent(price, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(montant, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(annuler, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(valideBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(85, 85, 85)
                        .addComponent(jButton3))
                    .addComponent(client, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(client, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(montant, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reste, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annuler, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(valideBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void valideBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valideBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valideBtnActionPerformed

    private void annulerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_annulerMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_annulerMouseClicked

    public JComboBox<String> getClient() {
        return client;
    }

    public void facture(int idFacture, int montantTotal, int montantPaye, int monnaieRendue, String nomClient, DefaultTableModel tableModel) {
        try {
            String fileName = "facture_" + idFacture + ".pdf";
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();

            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18, BaseColor.BLACK);
            Font normalFont = FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK);

            Paragraph title = new Paragraph("Facture", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            document.add(new Paragraph("\nClient: " + nomClient, normalFont));

            PdfPTable table = new PdfPTable(5);
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);

            table.addCell(new Phrase("Référence", normalFont));
            table.addCell(new Phrase("Nom", normalFont));
            table.addCell(new Phrase("Quantité", normalFont));
            table.addCell(new Phrase("Prix Unitaire", normalFont));
            table.addCell(new Phrase("Montant", normalFont));

            for (int i = 0; i < tableModel.getRowCount(); i++) {
                table.addCell(new Phrase(tableModel.getValueAt(i, 0).toString(), normalFont));
                table.addCell(new Phrase(tableModel.getValueAt(i, 1).toString(), normalFont));
                table.addCell(new Phrase(tableModel.getValueAt(i, 2).toString(), normalFont));
                table.addCell(new Phrase(tableModel.getValueAt(i, 3).toString(), normalFont));
                table.addCell(new Phrase(tableModel.getValueAt(i, 4).toString(), normalFont));
            }

            document.add(table);

            document.add(new Paragraph("\nMontant Total: " + montantTotal + " Ar", normalFont));
            document.add(new Paragraph("Montant Payé: " + montantPaye + " Ar", normalFont));
            document.add(new Paragraph("Monnaie Rendue: " + monnaieRendue + " Ar", normalFont));

            document.close();

            System.out.println("Facture PDF créée avec succès : " + fileName);

            File fn =  new File(fileName);
            if(Desktop.isDesktopSupported()){
                Desktop.getDesktop().open(fn);
            } else {
                System.out.println("Echec de l'ouverture. ");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erreur lors de la création de la facture PDF.");
        }
    }

    private void valideBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valideBtnMouseClicked
        // TODO add your handling code here:
        try {
            int montantTotal = Integer.parseInt(montant.getText());
            int montantPaye = Integer.parseInt(price.getText());
            int monnaieRendue = montantPaye - montantTotal;

            if (montantPaye < montantTotal) {
                JOptionPane.showMessageDialog(this, "Le montant payé est insuffisant.");
                return;
            }

            String[] clientInfo = this.getClient().getSelectedItem().toString().split(" ");
            String nomClient = clientInfo[0];
            String prenomClient = clientInfo.length > 1 ? clientInfo[1] : "";

            PreparedStatement pstClient = con.prepareStatement("SELECT idClient FROM client WHERE nom = ? AND prenom = ?");
            pstClient.setString(1, nomClient);
            pstClient.setString(2, prenomClient);
            ResultSet rsClient = pstClient.executeQuery();
            int idClient = -1;
            if (rsClient.next()) {
                idClient = rsClient.getInt("idClient");
            } else {
                JOptionPane.showMessageDialog(this, "Client non trouvé.");
                return;
            }

            int nombreLignes = factureFenetre.getTableModel().getRowCount();
            int idFacture = -1;
            for (int i = 0; i < nombreLignes; i++) {
                String reference = factureFenetre.getTableModel().getValueAt(i, 0).toString();
                int quantite = Integer.valueOf(factureFenetre.getTableModel().getValueAt(i, 2).toString());
                int montantLigne = Integer.valueOf(factureFenetre.getTableModel().getValueAt(i, 4).toString());

                PreparedStatement pstProd = con.prepareStatement("SELECT idProd FROM produit WHERE ref = ?");
                pstProd.setString(1, reference);
                ResultSet rsProd = pstProd.executeQuery();
                int idProd = -1;
                if (rsProd.next()) {
                    idProd = rsProd.getInt("idProd");
                } else {
                    JOptionPane.showMessageDialog(this, "Produit avec la référence " + reference + " non trouvé.");
                    return;
                }

                PreparedStatement pstStock = con.prepareStatement("UPDATE produit SET stock = stock - ? WHERE ref = ?");
                pstStock.setInt(1, quantite);
                pstStock.setString(2, reference);
                pstStock.executeUpdate();

                PreparedStatement pstInsert = con.prepareStatement(
                        "INSERT INTO facture (quantite, montantTotal, idProd, idClient) VALUES (?, ?, ?, ?)",
                        PreparedStatement.RETURN_GENERATED_KEYS
                );
                pstInsert.setInt(1, quantite);
                pstInsert.setInt(2, montantLigne);
                pstInsert.setInt(3, idProd);
                pstInsert.setInt(4, idClient);
                pstInsert.executeUpdate();

                ResultSet generatedKeys = pstInsert.getGeneratedKeys();
                if (generatedKeys.next()) {
                    idFacture = generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Échec de la récupération de l'ID de la facture.");
                }
            }

            JOptionPane.showMessageDialog(this, "Paiement confirmé");
            facture(idFacture, montantTotal, montantPaye, monnaieRendue, nomClient, factureFenetre.getTableModel());
            this.dispose();
            

            factureFenetre.reinitialiserInterface();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur de payement.");
        }
    }//GEN-LAST:event_valideBtnMouseClicked

    private void priceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFocusLost
        // TODO add your handling code here:
        int montantTotal = Integer.valueOf(montant.getText());
        int payer = Integer.valueOf(price.getText());
        int rendue = payer - montantTotal;

        if (rendue >= 0) {
            reste.setText(String.valueOf(rendue));
        } else {
            reste.setText(String.valueOf(rendue));
            JOptionPane.showMessageDialog(this, "Le montant payé est insuffisant.");
        }

    }//GEN-LAST:event_priceFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayementFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayementFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayementFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayementFenetre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayementFenetre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annuler;
    private javax.swing.JComboBox<String> client;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField montant;
    private javax.swing.JTextField price;
    private javax.swing.JTextField reste;
    private javax.swing.JButton valideBtn;
    // End of variables declaration//GEN-END:variables
}
